// ===== EXPORT SIMPLE - APC MINI MK1 CONFIGURATOR ===== //

const Export = {
    
    // ===== √âTAT ===== //
    isInitialized: false,

    // ===== INITIALISATION ===== //
    init() {
        if (this.isInitialized) return;
        
        this.createInterface();
        this.isInitialized = true;
        
        App.log('‚úÖ Module Export initialis√©', 'info');
    },

    // ===== INTERFACE AVEC CADRE ===== //
    createInterface() {
        const container = document.querySelector('.export-content');
        if (!container) return;
        
        container.innerHTML = `
            <div class="export-layout">
                <div class="export-section">
                    <div class="export-header">
                        <h1 class="export-title">T√©l√©chargement</h1>
                    </div>
                    
                    <div class="export-content-area">
                        <p class="export-description">
                            G√©n√©rez et t√©l√©chargez votre script APC Mini personnalis√©<br>
                            compatible avec Ableton Live 10/11/12
                        </p>
                        
                        <button class="download-btn" onclick="Export.download()">
                            üìÅ Script APC Mini
                        </button>
                        
                        <div class="export-status" id="exportStatus"></div>
                    </div>
                    
                    <div class="export-footer">
                        <p class="export-info">
                            Script Python + Instructions d'installation incluses
                        </p>
                    </div>
                </div>
            </div>
        `;
    },

    // ===== T√âL√âCHARGEMENT ZIP ===== //
    async download() {
        try {
            // Charger JSZip si n√©cessaire
            if (typeof JSZip === 'undefined') {
                await this.loadJSZip();
            }
            
            const zip = new JSZip();
            const config = App.getConfig();
            
            // Ajouter fichiers au ZIP
            zip.file('__init__.py', this.generateInit());
            zip.file('APC_Mini_Custom.py', this.generateScript(config));
            zip.file('INSTALLATION.txt', this.generateInstructions());
            
            // G√©n√©rer et t√©l√©charger ZIP
            const content = await zip.generateAsync({type: 'blob'});
            this.downloadFile(content, 'APC_Mini_Custom.zip');
            
            App.log('üì¶ Script t√©l√©charg√© avec succ√®s', 'success');
            
        } catch (error) {
            App.log(`‚ùå Erreur t√©l√©chargement: ${error.message}`, 'error');
        }
    },

    // ===== G√âN√âRATION FICHIERS ===== //
    generateInit() {
        return `# APC Mini MK1 Custom Script
from .APC_Mini_Custom import APC_Mini_Custom
__all__ = ['APC_Mini_Custom']
`;
    },

    generateScript(config) {
        return `# APC Mini MK1 Custom Script
# Generated by APC Mini Configurator
# ${new Date().toLocaleString()}

import Live
from _Framework.ControlSurface import ControlSurface
from _Framework.InputControlElement import MIDI_NOTE_TYPE, MIDI_CC_TYPE
from _Framework.ButtonElement import ButtonElement
from _Framework.EncoderElement import EncoderElement
from _Framework.SessionComponent import SessionComponent
from _Framework.TransportComponent import TransportComponent
from _Framework.MixerComponent import MixerComponent

class APC_Mini_Custom(ControlSurface):
    
    def __init__(self, c_instance):
        super(APC_Mini_Custom, self).__init__(c_instance)
        
        with self.component_guard():
            self._setup_transport()
            self._setup_mixer()
            self._setup_session()
            self._setup_custom_buttons()
    
    def _setup_transport(self):
        self._transport = TransportComponent()
    
    def _setup_mixer(self):
        self._mixer = MixerComponent(8)
        
        # Faders (48-56)
        for i in range(8):
            strip = self._mixer.channel_strip(i)
            fader = EncoderElement(MIDI_CC_TYPE, 0, 48 + i, Live.MidiMap.MapMode.absolute)
            strip.set_volume_control(fader)
        
        # Track select + ARM (64-71)
        for i in range(8):
            button = ButtonElement(True, MIDI_NOTE_TYPE, 0, 64 + i)
            strip = self._mixer.channel_strip(i)
            strip.set_select_button(button)
            strip.set_arm_button(button)
    
    def _setup_session(self):
        self._session = SessionComponent(8, 8)
        self._session.set_offsets(0, 0)
        
        # Pads (0-63)
        for row in range(8):
            for col in range(8):
                note = (7 - row) * 8 + col
                button = ButtonElement(True, MIDI_NOTE_TYPE, 0, note)
                button.set_on_off_values(1, 0)
                self._session.scene(row).clip_slot(col).set_launch_button(button)
    
    def _setup_custom_buttons(self):
        # Boutons personnalis√©s (82-89)
        buttons_config = ${JSON.stringify(config.buttons || {}, null, 8)}
        
        for note_str, button_config in buttons_config.items():
            note = int(note_str)
            button = ButtonElement(True, MIDI_NOTE_TYPE, 0, note)
            
            # Actions selon configuration
            normal_action = button_config.get('normal')
            if normal_action == 'play_stop':
                self._transport.set_play_button(button)
            elif normal_action == 'record':
                self._transport.set_record_button(button)
            elif normal_action == 'stop_all':
                self._transport.set_stop_button(button)
            elif normal_action == 'tap_tempo':
                self._transport.set_tap_tempo_button(button)
    
    def disconnect(self):
        super(APC_Mini_Custom, self).disconnect()
`;
    },

    generateInstructions() {
        return `APC Mini MK1 Custom Script - Instructions d'installation
=========================================================

√âTAPES D'INSTALLATION :

1. Fermez Ableton Live s'il est ouvert

2. Copiez le dossier APC_Mini_Custom dans le r√©pertoire Remote Scripts :

   Windows:
   C:\\ProgramData\\Ableton\\Live [version]\\Resources\\MIDI Remote Scripts\\
   
   Mac:
   /Applications/Ableton Live [version].app/Contents/App-Resources/MIDI Remote Scripts/

3. Red√©marrez Ableton Live

4. Dans Ableton Live, allez dans Pr√©f√©rences > Link/MIDI :
   - Control Surface: APC_Mini_Custom
   - Input: APC MINI
   - Output: APC MINI

5. Fermez cette interface web et utilisez votre APC Mini !

NOTES :
- Compatible Ableton Live 10/11/12
- Le script g√®re automatiquement les couleurs LED
- Les boutons 82-89 sont personnalis√©s selon votre configuration

Support: Consultez la documentation Ableton pour plus d'aide.
`;
    },

    // ===== UTILITAIRES ===== //
    async loadJSZip() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    },

    downloadFile(content, filename) {
        const a = document.createElement('a');
        const url = URL.createObjectURL(content);
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
};